(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{414:function(t,n,e){"use strict";e.r(n);var a=e(2),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h4",{attrs:{id:"一、cordova插件开发"}},[t._v("一、Cordova插件开发")]),t._v(" "),n("h5",{attrs:{id:"_1-安装plugman"}},[t._v("1.安装plugman")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("npm install -g plugman\n")])])]),n("h5",{attrs:{id:"_2-创建插件"}},[t._v("2.创建插件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("plugman create --name CorePlugin --plugin_id cordova-plugin-n22-CorePlugin --plugin_version 1.0.0\n")])])]),n("h5",{attrs:{id:"_3-移植原生代码"}},[t._v("3.移植原生代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("移植原生代码(插件部分及关联文件)到src下的android目录\n")])])]),n("h6",{attrs:{id:"示例一-coreplugin-java-主要用于解析hybridstr-应用反射执行具体插件功能"}},[t._v("示例一 CorePlugin.java (主要用于解析hybridStr,应用反射执行具体插件功能)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('package org.apache.cordova.n22;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.CordovaWebView;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\n\npublic class CorePlugin extends CordovaPlugin {\n\n\tprivate Activity activity;\n    private CordovaWebView webView;\n\n    public CorePlugin() {\n    }\n\n    @Override\n    public void initialize(CordovaInterface cordova, CordovaWebView webView) {\n        super.initialize(cordova, webView);\n        this.activity = cordova.getActivity();\n        this.webView = webView;\n    }\n\n    @SuppressLint("NewApi")\n\t@Override\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n        if ("callNative".equals(action)) {\n        \tSystem.out.println("callNative"+action);\n        \tMap<String, Object> paramMap = parseProtocol((String) args.get(0));\n        \tString protocolType = (String) paramMap.get("type"),\n        \t\t\tname =(String) paramMap.get("nameId"),\n        \t\t\tmethodAction =(String) paramMap.get("method"),\n        \t\t\tparameterStr =(String) paramMap.get("parm");\n        \tif(name.indexOf(":")!=-1)\n        \t{\n        \t\tname = name.substring(0,name.indexOf(":"));\n        \t}\n        \tSystem.out.println(paramMap);\n        \ttry {\n\t\t\t\tObject test;\n\t\t\t\ttest = ReflectUtil.invokeMethod(Class.forName(activity.getPackageName()+".plugin."+name).newInstance(),methodAction, new Class<?>[] { CallbackContext.class,Context.class, String.class },\n\t\t\t\t     new Object[] { callbackContext,activity, parameterStr });\n\t\t\t\tSystem.out.println(test);\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t\tcallbackContext.error("调用原生反射错误");\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t\tcallbackContext.error("调用原生反射错误");\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t\tcallbackContext.error("调用原生反射错误");\n\t\t\t}\n            return true;\n        }\n        return false;\n    }\n    \n    public static Map<String, Object> parseProtocol(String parmStr) {\n\t\tString protocolType = null,name = null,methodAction = null,parameterStr = null;\n\t\tString parmIn = new String(parmStr);\n\t\tif(parmIn.indexOf("hybrid://")!=-1)\n\t\t{\n\t\t\tprotocolType = "hybrid";\n\t\t\tparmIn = parmIn.replace("hybrid://", "");\n\t\t\tname = parmIn.substring(0, parmIn.indexOf("/"));\n\t\t\tif(parmIn.indexOf("?")!=-1){\n\t\t\t\tmethodAction = parmIn.substring(parmIn.indexOf("/")+1,parmIn.indexOf("?"));\n\t\t\t}else{\n\t\t\t\tmethodAction = parmIn.substring(parmIn.indexOf("/")+1,parmIn.length());\n\t\t\t}\n\t\t\t\n\t\t\tparameterStr = parmIn.substring(parmIn.indexOf("?")+1,parmIn.length());\n\t\t}\n\t\tMap<String, Object> res = new HashMap<String, Object>();\n\t\tres.put("type", protocolType);\n\t\tres.put("nameId", name);\n\t\tres.put("method", methodAction);\n\t\tres.put("parm", parameterStr);\n\t\t\n\t\treturn res;\n\t}\n    \n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    \t// TODO Auto-generated method stub\n    \tsuper.onActivityResult(requestCode, resultCode, intent);\n    \tSystem.out.println("进入返回");\n    }\n}\n')])])]),n("h6",{attrs:{id:"示例二-reflectutil-java-为配合coreplugin使用的反射操作类"}},[t._v("示例二 ReflectUtil.java (为配合CorePlugin使用的反射操作类)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('package org.apache.cordova.n22;\n\nimport android.annotation.SuppressLint;\nimport android.util.ArrayMap;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.math.BigDecimal;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 反射工具类\n *\n * @author yangzhilei\n */\n@SuppressLint("NewApi")\npublic class ReflectUtil {\n\n\tpublic static final String FULL_DATE_PATTERN = "yyyy-MM-dd HH:mm:ss";\n\tpublic static final String DATE_PATTERN_MINUTE = "yyyy-MM-dd HH:mm";\n\tpublic static final String DEFAULT_DATE_PATTERN = "yyyy-MM-dd";\n\n\tstatic final String[] tryParttern = new String[] { FULL_DATE_PATTERN, DATE_PATTERN_MINUTE, DEFAULT_DATE_PATTERN };\n\n\tpublic static Object newInstance(String className, Object... params) {\n\t\ttry {\n\t\t\tClass<?> cls = Class.forName(className);\n\t\t\treturn newInstance(cls, params);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static Object newInstance(Class<?> cls, Object... params) {\n\t\tClass<?>[] parameterTypes = null;\n\t\tif (params != null) {\n\t\t\tparameterTypes = new Class<?>[params.length];\n\t\t\tfor (int i = 0; i < params.length; i++) {\n\t\t\t\tparameterTypes[i] = params[i].getClass();\n\t\t\t}\n\t\t}\n\t\treturn newInstance(cls, parameterTypes, params);\n\t}\n\n\t/**\n\t * 实例化对象\n\t */\n\tpublic static Object newInstance(Class<?> cls, Class<?>[] parameterTypes, Object[] params) {\n\t\tObject result = null;\n\t\ttry {\n\t\t\tConstructor<?> constructor = getConstructor(cls, parameterTypes);\n\t\t\tresult = constructor.newInstance(params);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * 获取Constructor\n\t */\n\tpublic static Constructor<?> getConstructor(Class<?> cls, Class<?>[] parameterTypes) throws Exception {\n\t\tConstructor<?> constructor = null;\n\t\ttry {\n\t\t\tconstructor = cls.getDeclaredConstructor(parameterTypes);\n\t\t} catch (Exception e) {\n\t\t\tconstructor = cls.getConstructor(parameterTypes);\n\t\t}\n\t\treturn constructor;\n\t}\n\n\tpublic static Object invokeMethod(Object obj, String methodName, Object... params) {\n\t\tClass<?>[] parameterTypes = null;\n\t\tif (params != null) {\n\t\t\tparameterTypes = new Class<?>[params.length];\n\t\t\tfor (int i = 0; i < params.length; i++) {\n\t\t\t\tparameterTypes[i] = params[i].getClass();\n\t\t\t}\n\t\t}\n\t\treturn invokeMethod(obj, methodName, parameterTypes, params);\n\t}\n\n\t/**\n\t * 反射调用方法\n\t */\n\tpublic static Object invokeMethod(Object obj, String methodName, Class<?>[] parameterTypes, Object[] params) {\n\t\tClass<?> cls = null;\n\t\tif (obj instanceof Class<?>) {\n\t\t\tcls = (Class<?>) obj;\n\t\t} else {\n\t\t\tcls = obj.getClass();\n\t\t}\n\t\tObject result = null;\n\t\ttry {\n\t\t\tMethod method = getMethod(cls, methodName, parameterTypes);\n\t\t\tmethod.setAccessible(true);\n\t\t\tresult = method.invoke(obj, params);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t\tSystem.out.println("invoke method:" + methodName + "failed");\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * 获取Method\n\t */\n\tpublic static Method getMethod(Class<?> cls, String methodName, Class<?>[] parameterTypes) throws Exception {\n\t\tMethod method = null;\n\t\ttry {\n\t\t\tmethod = cls.getDeclaredMethod(methodName, parameterTypes);\n\t\t} catch (Exception e) {\n\t\t\tmethod = cls.getMethod(methodName, parameterTypes);\n\t\t}\n\t\treturn method;\n\t}\n\n\t/**\n\t * 获取class对应所有字段\n\t */\n\tpublic static Field[] getFields(Class<?> cls) {\n\t\tField[] result = cls.getDeclaredFields();\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\treturn new Field[] {};\n\t}\n\n\t/**\n\t * 获取field属性值\n\t */\n\tpublic static Object getFieldValue(Object target, Field field) {\n\t\tif (!field.isAccessible()) {\n\t\t\tfield.setAccessible(true);\n\t\t}\n\t\ttry {\n\t\t\treturn field.get(target);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 获取field属性值\n\t */\n\tpublic static Object getFieldValue(Object target, String fieldName) {\n\t\ttry {\n\t\t\tField field = target.getClass().getDeclaredField(fieldName);\n\t\t\treturn getFieldValue(target, field);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 设置field属性值\n\t */\n\tpublic static boolean setFieldValue(Object target, Field field, Object value) {\n\t\tif (!field.isAccessible()) {\n\t\t\tfield.setAccessible(true);\n\t\t}\n\t\ttry {\n\t\t\tObject result = null;\n\t\t\tif (value != null) {\n\t\t\t\tClass<?> type = field.getType();\n\t\t\t\tif (type.equals(value.getClass()) || type.isAssignableFrom(value.getClass())) {\n\t\t\t\t\tresult = value;\n\t\t\t\t} else {\n\t\t\t\t\tif (String.class.equals(type)) {\n\t\t\t\t\t\tresult = String.valueOf(value);\n\t\t\t\t\t} else if (Integer.class.equals(type) || int.class.equals(type)) {\n\t\t\t\t\t\tresult = Double.valueOf(value + "").intValue();\n\t\t\t\t\t} else if (Double.class.equals(type) || double.class.equals(type)) {\n\t\t\t\t\t\tresult = Double.valueOf(value + "");\n\t\t\t\t\t} else if (Float.class.equals(type) || float.class.equals(type)) {\n\t\t\t\t\t\tresult = Double.valueOf(value + "").floatValue();\n\t\t\t\t\t} else if (Long.class.equals(type) || long.class.equals(type)) {\n\t\t\t\t\t\tresult = Double.valueOf(value + "").longValue();\n\t\t\t\t\t} else if (Date.class.equals(type)) {\n\t\t\t\t\t\tresult = getDate(value + "");\n\t\t\t\t\t} else if (BigDecimal.class.equals(type)) {\n\t\t\t\t\t\tresult = new BigDecimal(value + "");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfield.set(target, result);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * String转Date，尝试tryParttern中的各种格式\n\t */\n\tpublic static Date getDate(String dateStr) {\n\t\tDate date = null;\n\t\tSimpleDateFormat sf = new SimpleDateFormat();\n\t\tfor (int i = 0; i < tryParttern.length; i++) {\n\t\t\tsf.applyPattern(tryParttern[i]);\n\t\t\ttry {\n\t\t\t\tdate = sf.parse(dateStr);\n\t\t\t} catch (Exception e) {\n\n\t\t\t}\n\t\t\tif (date != null) {\n\t\t\t\treturn date;\n\t\t\t}\n\t\t}\n\t\tif (date == null) {\n\t\t\tSystem.out.println("trans date failed, dateStr : " + dateStr);\n\t\t}\n\t\treturn date;\n\t}\n\n\t/**\n\t * map 映射到 Object，对象必须有默认无参构造,对象中不支持map字段\n\t *\n\t * @return\n\t */\n\t@SuppressWarnings("unchecked")\n\tpublic static <T> T mapToObject(Class<T> cls, Map<?, ?> map) {\n\t\tT obj = (T) ReflectUtil.newInstance(cls);\n\t\tif (obj != null) {\n\t\t\tField[] fields = getFields(cls);\n\t\t\tfor (Field f : fields) {\n\t\t\t\tif (isSkip(f)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tf.setAccessible(true);\n\t\t\t\tString name = f.getName();\n\t\t\t\tObject value = map.get(name);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (isBaseType(f)) {// 基础类型\n\t\t\t\t\t\tsetFieldValue(obj, f, value);\n\t\t\t\t\t} else if (f.getType().isAssignableFrom(value.getClass())) {// value与字段类型一致\n\t\t\t\t\t\t// List集合,必须有泛型\n\t\t\t\t\t\tif (List.class.isAssignableFrom(f.getType())) {\n\t\t\t\t\t\t\tList<Object> list = (List<Object>) value;\n\t\t\t\t\t\t\ttransMapListToObjList(list, f);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetFieldValue(obj, f, value);\n\t\t\t\t\t} else if (Map.class.isAssignableFrom(value.getClass())) {// value为map类型，需要进行映射\n\t\t\t\t\t\tsetFieldValue(obj, f, mapToObject(f.getType(), (Map<?, ?>) value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}\n\n\tstatic void transMapListToObjList(List<Object> list, Field f) {\n\t\tType fc = f.getGenericType();\n\t\tif (fc == null) {\n\t\t\treturn;\n\t\t}\n\t\tClass<?> parameterizedType = getParameterizedType(fc);\n\t\tif (parameterizedType != null) {\n\t\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\t\tObject obj = list.get(i);\n\t\t\t\tif (parameterizedType.isAssignableFrom(obj.getClass())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (Map.class.isAssignableFrom(obj.getClass())) {\n\t\t\t\t\tlist.set(i, mapToObject(parameterizedType, (Map<?, ?>) obj));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static Class<?> getParameterizedType(Type type) {\n\t\tif (type instanceof ParameterizedType) {\n\t\t\ttry {\n\t\t\t\tClass<?> pType = (Class<?>) ((ParameterizedType) type).getActualTypeArguments()[0];\n\t\t\t\treturn pType;\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic boolean isSkip(Field f) {\n\t\tint modifiers = f.getModifiers();\n\t\t// 过滤final static transient修饰的字段\n\t\tif (Modifier.isFinal(modifiers) || Modifier.isStatic(modifiers) || Modifier.isTransient(modifiers)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic boolean isBaseType(Field f) {\n\t\tClass<?> type = f.getType();\n\t\tif (type.isPrimitive()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (type.getName().startsWith("java.lang") || Date.class.equals(type) || BigDecimal.class.equals(type) || byte[].class.equals(type)\n\t\t\t\t|| int[].class.equals(type) || int[].class.equals(type) || double[].class.equals(type)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Object 转 Map,支持对象嵌套，对象中不支持Map类型\n\t */\n\t@SuppressLint("NewApi")\n\t@SuppressWarnings("unchecked")\n\tpublic static Map<String, Object> objectToMap(Object obj) {\n\t\tArrayMap<String, Object> map = new ArrayMap<String, Object>();\n\t\tField[] fields = getFields(obj.getClass());\n\t\tfor (Field f : fields) {\n\t\t\tif (isSkip(f)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tf.setAccessible(true);\n\t\t\tObject value = getFieldValue(obj, f);\n\t\t\tif (value != null) {\n\t\t\t\tif (isBaseType(f)) {\n\t\t\t\t\tmap.put(f.getName(), value);\n\t\t\t\t} else if (List.class.isAssignableFrom(f.getType())) {// List类型\n\t\t\t\t\tList<Map<String, Object>> result = transListToMapList((List<Object>) value, f);\n\t\t\t\t\tif (result != null && !result.isEmpty()) {\n\t\t\t\t\t\tmap.put(f.getName(), result);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(f.getName(), objectToMap(value));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\n\tstatic List<Map<String, Object>> transListToMapList(List<Object> list, Field f) {\n\t\tList<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n\t\tType fc = f.getGenericType();\n\t\tif (fc == null) {\n\t\t\treturn null;\n\t\t}\n\t\tClass<?> parameterizedType = getParameterizedType(fc);\n\t\tif (parameterizedType != null) {\n\t\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\t\tObject obj = list.get(i);\n\t\t\t\tif (parameterizedType.isAssignableFrom(obj.getClass())) {\n\t\t\t\t\tresult.add(objectToMap(obj));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n')])])]),n("h6",{attrs:{id:"示例四-madiallphone-java-通过解析hybridstr并在coreplugin使用反射技术来执行的插件示例"}},[t._v("示例四 MADiallPhone.java (通过解析hybridStr并在CorePlugin使用反射技术来执行的插件示例)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('注意:此文件应位于工程项目包名下的plugin目录中\n\npackage cn.com.n22.prd.plugin;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.text.TextUtils;\n\nimport org.apache.cordova.CallbackContext;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport cn.com.n22.prd.MainActivity;\nimport cn.com.n22.prd.uiInterface.MAInterface;\n\n/**\n * Created by zhanxiaolin-n22 on 2018/1/17.\n */\n\npublic class MADiallPhone implements MAInterface {\n\n    private MainActivity activity;\n    private CallbackContext mCallbackContext;\n\n    /**\n     * h5与原生的回调方法\n     * @param callbackContext  回调\n     * @param context activity\n     * @param args h5页面可传参 需配置\n     */\n    private void invokeDiallPhone(final CallbackContext callbackContext, final Context context, String args) {\n        activity = (MainActivity) context;\n        mCallbackContext = callbackContext;\n        if(!TextUtils.isEmpty(args)){\n            JSONObject json = null;\n            try {\n                json = new JSONObject(args);\n                diallPhone(json.getString("url"));\n            } catch (JSONException e) {\n                callbackContext.error(e.getMessage());\n            }\n        }\n    }\n\n    @Override\n    public void onAfterApplyAllPermission(int requestCode) {\n\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n\n    }\n\n    /**\n     * 拨打电话（跳转到拨号界面，用户手动点击拨打）\n     *\n     * @param phoneNum 电话号码\n     */\n    public void diallPhone(String phoneNum) {\n        Intent intent = new Intent(Intent.ACTION_DIAL);\n        Uri data = Uri.parse("tel:" + phoneNum);\n        intent.setData(data);\n        activity.startActivity(intent);\n    }\n}\n\n关联类一:\npackage cn.com.n22.prd.uiInterface;\n\nimport android.content.Intent;\n\n/**\n * 作者：wwl on 2017/8/2 16：40.\n * 邮箱：wwl198800@163.com\n * 电话：18600868377\n */\n\npublic interface ActivityResultBackInterface {\n\n  /**\n   * 处理onActivityResult回调\n   */\n  void onActivityResult(int requestCode, int resultCode, Intent intent);\n\n}\n\n关联类二:\npackage cn.com.n22.prd.uiInterface;\n\n/**\n * 作者：wwl on 2017/8/2 16：37.\n * 邮箱：wwl198800@163.com\n * 电话：18600868377\n */\n\npublic interface PermissionInterface {\n\n  /**\n   * 申请所有权限之后的逻辑\n   */\n  void onAfterApplyAllPermission(int requestCode);\n\n}\n\n关联类三:\npackage cn.com.n22.prd.uiInterface;\n\n/**\n * 作者：wwl on 2017/7/25 17：28.\n * 邮箱：wwl198800@163.com\n * 电话：18600868377\n */\npublic interface MAInterface extends PermissionInterface, ActivityResultBackInterface {\n\n}\n')])])]),n("h5",{attrs:{id:"_4-交互部分编写-www-xxxjs"}},[t._v("4.交互部分编写(www/xxxjs)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('/* 此交互js可公共使用\n * hybridStr 调用原生事例\n * MABjCaPlugin 为 业务类 类名\n * 202 方法ID\n * showSignMutiViewWithInfo 为方法名\n * ?问号后面为方法参数 \n * var hybridStr = \'hybrid://MABjCaPlugin:202/showSignMutiViewWithInfo?{\\"paramters\\":\\"hello\\"}\';\n * CorePlugin.hybridCallAction(hybridStr, successBlock, failBlock);\n * //调用插件 成功返回\n * function successBlock(result){\n * \tconsole.log(result);\n * }\n * //调用插件 失败返回\n * function failBlock(errorStr){\n *\tconsole.log(errorStr);\n * }\n */\nvar exec = require(\'cordova/exec\');\n\nvar CorePlugin = {\n    hybridCallAction:function(hybridStr,successBlock,failBlock) {\n        exec(successBlock, failBlock, "CorePlugin", "callNative", [hybridStr]);\n    }\n};\nmodule.exports = CorePlugin;\n')])])]),n("h5",{attrs:{id:"_5-配置文件修改-plugin-xml"}},[t._v("5.配置文件修改(plugin.xml)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<plugin \n\t\tid="cordova-plugin-n22-CorePlugin" \n\t\tversion="1.0.0" \n\t\txmlns="http://apache.org/cordova/ns/plugins/1.0" xmlns:android="http://schemas.android.com/apk/res/android">\n\t\x3c!--插件名称--\x3e\t    \n\t<name>CorePlugin</name>\n\t\x3c!--插件描述--\x3e\t\n    <description>A cordova plugin, a JS version of n22 SDK</description>\n    <keywords>cordova,n22</keywords>\n    <js-module name="CorePlugin" src="www/CorePlugin.js">\n\t\t\x3c!--H5或js通过它去调用js中间件（插件）中定义的方法--\x3e\n        <clobbers target="CorePlugin" />\n    </js-module>\n    \x3c!-- platform：支持的平台 android --\x3e\n    <platform name="android">\n\t\t\x3c!--插件的配置信息，build的时候会添加到res/xml/config.xml 文件中--\x3e\n        <config-file target="res/xml/config.xml" parent="/*">\n            <feature name="CorePlugin">\n                <param name="android-package" value="org.apache.cordova.n22.CorePlugin"/>\n            </feature>\n        </config-file>\n\t\t<source-file src="src/android/CorePlugin.java" target-dir="src/org/apache/cordova/n22" />\n\t\t<source-file src="src/android/ReflectUtil.java" target-dir="src/org/apache/cordova/n22" />\n    </platform>\n</plugin>\n')])])]),n("h5",{attrs:{id:"编译插件"}},[t._v("编译插件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("npm init\n")])])]),n("h4",{attrs:{id:"二、cordova插件安装使用"}},[t._v("二、Cordova插件安装使用")]),t._v(" "),n("h5",{attrs:{id:"_1-安装插件"}},[t._v("1.安装插件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("插件列表: cordova plugin ls\n安装插件: cordova plugin add xxx\n卸载插件: cordova plugin rm xxx\n")])])]),n("h5",{attrs:{id:"_2-h5调用"}},[t._v("2.H5调用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('H5中使用:\n/* 此交互js可公共使用\n * hybridStr 调用原生事例\n * MADiallPhone 为 业务类 类名\n * 202 方法ID\n * invokeDiallPhone 为方法名\n * ?问号后面为方法参数 \n * var hybridStr = \'hybrid://MADiallPhone:202/invokeDiallPhone?{\\"paramters\\":\\"hello\\"}\';\n * CorePlugin.hybridCallAction(hybridStr, successBlock, failBlock);\n * //调用插件 成功返回\n * function successBlock(result){\n * \tconsole.log(result);\n * }\n * //调用插件 失败返回\n * function failBlock(errorStr){\n *\tconsole.log(errorStr);\n * }\n */\nvar hybridStr = \'hybrid://MADiallPhone:202/invokeDiallPhone?{\\"url\\":\\"15321776071\\"}\';\nCorePlugin.hybridCallAction(hybridStr,function(data){\n\talert(data)\n},function(error){\n\talert(error)\n})\n')])])]),n("h5",{attrs:{id:"_3-编译原生包"}},[t._v("3.编译原生包")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("编译项目: cordova build android (指定平台)\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);